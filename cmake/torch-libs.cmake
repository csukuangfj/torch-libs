# Copyright (c)  2022-2023  Xiaomi Corporation
macro(download_torch_libs)
  include(FetchContent)

  message(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
  message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")

  if(CMAKE_SYSTEM_NAME STREQUAL Linux AND CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
    if(BUILD_SHARED_LIBS)
      if(GLIBCXX_USE_CXX11_ABI)
        include(torch-linux-x64-shared-cxxabi)
      else()
        include(torch-linux-x64-shared)
      endif()
    else()
      if(GLIBCXX_USE_CXX11_ABI)
        include(torch-linux-x64-static-cxxabi)
      else()
        include(torch-linux-x64-static)
      endif()
    endif()
  elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin)
    if(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64 AND CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
      # cross compiling
      if(BUILD_SHARED_LIBS)
        include(torch-osx-arm64-shared)
      else()
        include(torch-osx-arm64-static)
      endif()
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL arm64 AND CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
      # cross compiling
      if(BUILD_SHARED_LIBS)
        include(torch-osx-x64-shared)
      else()
        include(torch-osx-x64-static)
      endif()
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL arm64)
      if(BUILD_SHARED_LIBS)
        include(torch-osx-arm64-shared)
      else()
        include(torch-osx-arm64-static)
      endif()
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
      if(BUILD_SHARED_LIBS)
        include(torch-osx-x64-shared)
      else()
        include(torch-osx-x64-static)
      endif()
    else()
      message(FATAL_ERROR "Unsupport processor {CMAKE_SYSTEM_PROCESSOR} for Darwin")
    endif()
  else()
    message(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
    message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
    message(FATAL_ERROR "Only support Linux x64 at present. Will support other OSes later")
  endif()
endmacro()

download_torch_libs()
